# Maintainer: Natanael Copa <ncopa@alpinelinux.org>

_flavor=lts
pkgname=linux-${_flavor}
pkgver=5.4.72
case $pkgver in
	*.*.*)	_kernver=${pkgver%.*};;
	*.*) _kernver=$pkgver;;
esac
pkgrel=0
pkgdesc="Linux lts kernel"
url="https://www.kernel.org"
depends="mkinitfs"
_depends_dev="perl gmp-dev elfutils-dev bash flex bison"

# 'linux-firmware-any' is not really needed and it will break the build if you are 
# executing 'abuild -r' on a live system. On a live system you have two choices
# - install 'linux-firmware-none'
# - manually install all dependencies except that one and use 'abuild -rd'
#
# I believe that package is only needed in order to ensure the correct build order
# when building more than just this package. The devs explained to me that the 
# official workaround (and the reason why they are using 'linux-firmware-any' 
# of instead 'linux-firmware') is that one can simply install 'linux-firmware-none'
# and the build system will be happy and everything will work.
makedepends="$_depends_dev sed installkernel bc linux-headers openssl-dev diffutils linux-firmware-any"

options="!strip"
_config=${config:-config-lts.${CARCH}}
install=
source="https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/linux-$_kernver.tar.xz
	0002-powerpc-config-defang-gcc-check-for-stack-protector-.patch

	config-lts.aarch64
	config-lts.armv7
	config-lts.x86
	config-lts.x86_64
	config-lts.ppc64le
	config-lts.s390x
	config-lts.mips64
	config-lts.mips

	config-virt.aarch64
	config-virt.armv7
	config-virt.x86
	config-virt.x86_64

	config-custom.x86_64
	"
subpackages="$pkgname-dev:_dev:$CBUILD_ARCH"
_flavors=
for _i in $source; do
	case $_i in
	config-*.$CARCH)
		_f=${_i%.$CARCH}
		_f=${_f#config-}
		_flavors="$_flavors ${_f}"
		if [ "linux-$_f" != "$pkgname" ]; then
			subpackages="$subpackages linux-${_f}::$CBUILD_ARCH linux-${_f}-dev:_dev:$CBUILD_ARCH"
		fi
		;;
	esac
done

if [ "${pkgver%.0}" = "$pkgver" ]; then
	source="$source
	https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/patch-$pkgver.xz"
fi
arch="all !armhf"
license="GPL-2.0"

_carch=${CARCH}
case "$_carch" in
aarch64*) _carch="arm64" ;;
arm*) _carch="arm" ;;
mips*) _carch="mips" ;;
ppc*) _carch="powerpc" ;;
s390*) _carch="s390" ;;
esac

_compilerFlags="";

prepare() {
	# ask if the user wants to tune the compilation to the current CPU
	while true; do
	    read -p "Do you wish to optimize the code for the current CPU (march=native mtune=native)? [y/n] " yn
	    case $yn in
	        [Yy]* ) _compilerFlags="-O2 -march=native -mtune=native"; break;;
	        [Nn]* ) break;;
	        * ) echo "Please answer yes or no.";;
	    esac
	done

	local _patch_failed=
	cd "$srcdir"/linux-$_kernver
	if [ "$_kernver" != "$pkgver" ]; then
		msg "Applying patch-$pkgver.xz"
		unxz -c < "$srcdir"/patch-$pkgver.xz | patch -p1 -N
	fi

	# first apply patches in specified order
	for i in $source; do
		case $i in
		*.patch)
			msg "Applying $i..."
			if ! patch -s -p1 -N -i "$srcdir"/$i; then
				echo $i >>failed
				_patch_failed=1
			fi
			;;
		esac
	done

	if ! [ -z "$_patch_failed" ]; then
		error "The following patches failed:"
		cat failed
		return 1
	fi

	# remove localversion from patch if any
	rm -f localversion*
	oldconfig
}

oldconfig() {
	for i in $_flavors; do
		local _config=config-$i.${CARCH}
		local _builddir="$srcdir"/build-$i.$CARCH
		mkdir -p "$_builddir"
		echo "-$pkgrel-$i" > "$_builddir"/localversion-alpine \
			|| return 1

		cp "$srcdir"/$_config "$_builddir"/.config
		make -C "$srcdir"/linux-$_kernver \
			O="$_builddir" \
			ARCH="$_carch" \
			listnewconfig oldconfig
	done
}

build() {
	if [ ! -z "$_compilerFlags" ]; then
		# some parts of the kernel makefile explicitly set march and mtune value.
		# Here update it, forcing it to use -march and -mtune == native
		# Unfortunately this is not really reversible in case the user
		# stops the process in the middle
		cp "$srcdir"/linux-$_kernver/arch/x86/Makefile "$srcdir"/linux-$_kernver/arch/x86/Makefile.alpino-bak
		sed -i 's/march=k8\|march=nocona\|mtune=generic/march=native mtune=native/' "$srcdir"/linux-$_kernver/arch/x86/Makefile
	else
		# just to be safe, in case there is a Makefile.alpino-bak, assume it is the original and restore it
		if [ -e "$srcdir"/linux-$_kernver/arch/x86/Makefile.alpino-bak ]; then
			cp "$srcdir"/linux-$_kernver/arch/x86/Makefile.alpino-bak "$srcdir"/linux-$_kernver/arch/x86/Makefile
		fi
	fi

	unset LDFLAGS
	export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"
	for i in $_flavors; do
		cd "$srcdir"/build-$i.$CARCH
		make ARCH="$_carch" CC="${CC:-gcc}" \
			KBUILD_BUILD_VERSION="$((pkgrel + 1 ))-Alpine" \
			KCFLAGS="$_compilerFlags" \
			KCPPFLAGS="$_compilerFlags"
	done

	if [ ! -z "$_compilerFlags" ]; then
		# restore the kernel makefile, in case we modified it
		mv "$srcdir"/linux-$_kernver/arch/x86/Makefile.alpino-bak "$srcdir"/linux-$_kernver/arch/x86/Makefile
	fi
}

_package() {
	local _buildflavor="$1" _outdir="$2"
	local _abi_release=${pkgver}-${pkgrel}-${_buildflavor}
	export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

	cd "$srcdir"/build-$_buildflavor.$CARCH
	# modules_install seems to regenerate a defect Modules.symvers on s390x. Work
	# around it by backing it up and restore it after modules_install
	cp Module.symvers Module.symvers.backup

	mkdir -p "$_outdir"/boot "$_outdir"/lib/modules

	local _install
	case "$CARCH" in
		arm*|aarch64) _install="zinstall dtbs_install";;
		*) _install=install;;
	esac

	make -j1 modules_install $_install \
		ARCH="$_carch" \
		INSTALL_MOD_PATH="$_outdir" \
		INSTALL_PATH="$_outdir"/boot \
		INSTALL_DTBS_PATH="$_outdir/boot/dtbs-$_flavor"

	cp Module.symvers.backup Module.symvers

	rm -f "$_outdir"/lib/modules/${_abi_release}/build \
		"$_outdir"/lib/modules/${_abi_release}/source
	rm -rf "$_outdir"/lib/firmware

	install -D include/config/kernel.release \
		"$_outdir"/usr/share/kernel/$_buildflavor/kernel.release
}

# main flavor installs in $pkgdir
package() {
	depends="$depends linux-firmware-any"

	_package lts "$pkgdir"
}

# subflavors install in $subpkgdir
virt() {
	_package virt "$subpkgdir"
}

custom() {
	_package custom "$subpkgdir"
}

_dev() {
	local _flavor=$(echo $subpkgname | sed -E 's/(^linux-|-dev$)//g')
	local _abi_release=${pkgver}-${pkgrel}-$_flavor
	# copy the only the parts that we really need for build 3rd party
	# kernel modules and install those as /usr/src/linux-headers,
	# simlar to what ubuntu does
	#
	# this way you dont need to install the 300-400 kernel sources to
	# build a tiny kernel module
	#
	pkgdesc="Headers and script for third party modules for $_flavor kernel"
	depends="$_depends_dev"
	local dir="$subpkgdir"/usr/src/linux-headers-${_abi_release}
	export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

	# first we import config, run prepare to set up for building
	# external modules, and create the scripts
	mkdir -p "$dir"
	cp "$srcdir"/config-$_flavor.${CARCH} "$dir"/.config
	echo "-$pkgrel-$_flavor" > "$dir"/localversion-alpine

	make -j1 -C "$srcdir"/linux-$_kernver O="$dir" ARCH="$_carch" \
		syncconfig prepare modules_prepare scripts

	# remove the stuff that points to real sources. we want 3rd party
	# modules to believe this is the soruces
	rm "$dir"/Makefile "$dir"/source

	# copy the needed stuff from real sources
	#
	# this is taken from ubuntu kernel build script
	# http://kernel.ubuntu.com/git/ubuntu/ubuntu-zesty.git/tree/debian/rules.d/3-binary-indep.mk
	cd "$srcdir"/linux-$_kernver
	find .  -path './include/*' -prune \
		-o -path './scripts/*' -prune -o -type f \
		\( -name 'Makefile*' -o -name 'Kconfig*' -o -name 'Kbuild*' -o \
		   -name '*.sh' -o -name '*.pl' -o -name '*.lds' -o -name 'Platform' \) \
		-print | cpio -pdm "$dir"

	cp -a scripts include "$dir"

	find $(find arch -name include -type d -print) -type f \
		| cpio -pdm "$dir"

	install -Dm644 "$srcdir"/build-$_flavor.$CARCH/Module.symvers \
		"$dir"/Module.symvers

	mkdir -p "$subpkgdir"/lib/modules/${_abi_release}
	ln -sf /usr/src/linux-headers-${_abi_release} \
		"$subpkgdir"/lib/modules/${_abi_release}/build
}
sha512sums="9f60f77e8ab972b9438ac648bed17551c8491d6585a5e85f694b2eaa4c623fbc61eb18419b2656b6795eac5deec0edaa04547fc6723fbda52256bd7f3486898f  linux-5.4.tar.xz
d19365fe94431008768c96a2c88955652f70b6df6677457ee55ee95246a64fdd2c6fed9b3bef37c29075178294a7fc91f148ead636382530ebfa822be4ad8c2f  0002-powerpc-config-defang-gcc-check-for-stack-protector-.patch
55493ea5b0e8a1aa77f6bc5da1353cf41ba148a47b3bd3482a5fd122a200b1f03c460510b4a1697b9fefd8bc6c7b5d7b70da410027189eaa955c3cbb56b85412  config-lts.aarch64
cddc9a4f53c1dd1c36b5d0b8c9e4e4b7997e5189344e7b98ce20e6f3f18c2b5c42da05b88d0b6991985d2b044137c53b33de0b87c43870fc20515cbefc4a0235  config-lts.armv7
e39d67d6edb9279d7b861fff3ab1f3cd34cd9dfa888780e6698e969e5c97577d3f888afdd99458948b38a860e479730f4179a0e149ba30b1a4d4175cf534a1e0  config-lts.x86
4d30c9ece08935943583a5057b3a561111c33a3bad08f68fb3ccad5537b4795b3c434052d88e2d54f896acc08802f0bfe67fdb6702122690a73db0567e2cbac0  config-lts.x86_64
33e016e5878f4612975dda4ae8c45a7f20f4885182ae2beb0adf70393f02c1586b3d2b0b88a765076fd701d0ee0ff244c38c621284dc26c3bdd3caffa0e40800  config-lts.ppc64le
6e8c51360fc605e0e3e70e2ddedbec38ebe8fad7bcf1d3eb96074f1913d10612089bf7175bbea6b6cb0bb80086f3f71ba5be79b73e4ba4f8c115e96695fbb23f  config-lts.s390x
d4946cbd2fd0af507abb2946c3fd13c4b02e610c6c01b9b889c84708125099d2b45e91be4c34255d3c918675c757a2a0c2e11c8b577d4d3814035fd7cff53d39  config-lts.mips64
9d2ecf0ef369c0fe70334915b11eba8b67ced73998d429f84b3c08b8e7ffe0f249025cfb690f2f8076dac641029b0aa9d03d8400df62d57618ba2ae471374eef  config-lts.mips
459623f0a01ff64203bcbc44b3a911b32c012b19f2c8d812d454f15f969df34a1d252e5aaa724e4e323cfbf2ca26ee4ca26ac81772f1ba264009b9fbce9a43c4  config-virt.aarch64
88d371b84ffd68291bddadbb2be6c664d95a453e9b8d81822bf3cc0afb71cf70c494ff3bc6319f5fbfa5d10031f854dc631657a609baf2f67af8328b58140e2c  config-virt.armv7
5fd0424774ef8238a605673a72b36dd99fb4340a22fa0a030910ba91569e31a10573dc40f9cb04bd0c30ccefacbb86f1dacca46659d2d5d1de1d0760625ede88  config-virt.x86
43c2203e1fad43635375113ca1a92b0387362ff0b2177b46a500e02b82779ac21af0227f4caf1e46f40de709ff6925d96c1d1d8deeb673cb884247147adde0c4  config-virt.x86_64
cd820d6da41164c75ee4b486264ac21b6a9c5c00ab85d6bbb4b85f333969d7941dc44086b648fbae537e6cb4931b4af8defe2eee0a292e409308b9d72e2ed35a  config-custom.x86_64
c553c2fcee0601f90b143e8669abc153173ec4fa8f44aee59ea8da95b03e707f0ca542f9a1574f789dfe61a9fc42e211394d41ad990fc338d686d73c49230708  patch-5.4.72.xz"
